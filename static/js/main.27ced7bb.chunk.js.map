{"version":3,"sources":["components/Heading.js","components/Form.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["Heading","className","React","Component","Form","onSubmit","this","props","getWeather","Display","city","country","description","temperature","humidity","API_KEY","lat","lon","navigator","geolocation","getCurrentPosition","position","coords","latitude","Math","round","longitude","window","console","log","App","state","undefined","icon","error","e","a","preventDefault","fetch","api_call","json","data","setState","name","sys","weather","main","temp","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAkBeA,E,iLAdP,OACI,6BACA,4EAEA,uBAAGC,UAAY,QAAf,6BAEA,uBAAGA,UAAY,QAAf,4DACA,uBAAGA,UAAY,QAAf,4D,GATUC,IAAMC,WCUbC,E,iLARP,OACI,0BAAMC,SAAYC,KAAKC,MAAMC,YAC7B,4BAAQP,UAAY,SAApB,iC,GAJOC,IAAMC,WCkBVM,E,iLAhBP,OACI,6BAECH,KAAKC,MAAMG,MAAQJ,KAAKC,MAAMI,SAAU,gCAAML,KAAKC,MAAMG,KAAjB,KAAyBJ,KAAKC,MAAMI,SAE5EL,KAAKC,MAAMK,aAAe,2CAAiBN,KAAKC,MAAMK,aAEtDN,KAAKC,MAAMM,aAAe,4CAAkBP,KAAKC,MAAMM,YAA7B,UAE1BP,KAAKC,MAAMO,UAAY,yCAAeR,KAAKC,MAAMO,SAA1B,U,GAXdZ,IAAMC,WCGtBY,EAAU,mCAEZC,EAAM,GACNC,EAAM,GAENC,UAAUC,YACbD,UAAUC,YAAYC,oBAMnB,SAAqBC,GACrBL,EAAMK,EAASC,OAAOC,SAClBP,EAAMQ,KAAKC,MAAY,IAANT,GAAa,IAClCC,EAAMI,EAASC,OAAOI,UAClBT,EAAMO,KAAKC,MAAY,IAANR,GAAa,IAC9BU,OAAOX,IAAMA,EACbW,OAAOV,IAAMA,KATjBW,QAAQC,IAAI,iD,IAgEDC,E,2MAnDXC,MAAQ,CACJrB,UAAKsB,EACLrB,aAAQqB,EACRnB,iBAAamB,EACbC,UAAMD,EACNlB,cAAUkB,EACVpB,iBAAaoB,EACbE,WAAOF,G,EAGXxB,W,uCAAa,WAAO2B,GAAP,iBAAAC,EAAA,6DACTD,EAAEE,iBADO,SAGcC,MAAM,sDAAsDX,OAAOX,IAAI,QAAQW,OAAOV,IAAI,UAAUF,EAAQ,iBAH1H,cAGHwB,EAHG,gBAKUA,EAASC,OALnB,OAKHC,EALG,OAMTb,QAAQC,IAAIY,GAETxB,GAAOD,GACN,EAAK0B,SAAS,CACdhC,KAAM+B,EAAKE,KACXhC,QAAS8B,EAAKG,IAAIjC,QAClBsB,KAAKQ,EAAKI,QAAQ,GAAGZ,KACrBrB,YAAa6B,EAAKI,QAAQ,GAAGjC,YAC7BC,YAAY4B,EAAKK,KAAKC,KACtBjC,SAAS2B,EAAKK,KAAKhC,WAfd,2C,8HAuBT,OACI,yBAAKb,UAAW,WAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMO,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACAE,KAAQJ,KAAKyB,MAAMrB,KACnBC,QAAWL,KAAKyB,MAAMpB,QACtBsB,KAAQ3B,KAAKyB,MAAME,KACnBrB,YAAeN,KAAKyB,MAAMnB,YAC1BC,YAAeP,KAAKyB,MAAMlB,YAC1BC,SAAYR,KAAKyB,MAAMjB,gB,GA5CjBZ,IAAMC,WCdJ6C,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBrC,WACrBA,UAAUsC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27ced7bb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Heading extends React.Component {\r\n    render() {\r\n        return (\r\n            <div> \r\n            <h1> Welcome to the hottest Weather App online!!</h1>\r\n            \r\n            <p className = \"lead\"> Made by Keilon Robertson</p>\r\n            \r\n            <p className = \"lead\"> Check out updated weather conditions wherever you are!!</p>\r\n            <p className = \"lead\"> Make sure you allow this page to use your location</p>\r\n            \r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default Heading;","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit = {this.props.getWeather}>\r\n            <button className = \"mybtn\">Get Weather Conditions!!</button>\r\n            </form>\r\n        );\r\n    }    \r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nclass Display extends React.Component {\r\n    render() {\r\n        return (            \r\n            <div> \r\n            \r\n            {this.props.city && this.props.country &&<h1> {this.props.city}, {this.props.country}</h1>}\r\n\r\n            {this.props.description && <p>Conditions:  {this.props.description}</p>}\r\n            \r\n            {this.props.temperature && <p> Temperature: {this.props.temperature}Â° C\r\n            </p>}\r\n            {this.props.humidity && <p> Humidity: {this.props.humidity}%</p>} \r\n            \r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default Display;\r\n\r\n\r\n","import React from \"react\";\nimport Heading from \"./components/Heading\";\nimport Form from \"./components/Form\";\nimport Display from \"./components/Display\";\n\nconst API_KEY = \"ad455f2d843612627d08eddd563d9e28\";\n    \nvar lat = \"\";\nvar lon = \"\";\n\nif (navigator.geolocation) {    \n navigator.geolocation.getCurrentPosition(getPosition);\n}\nelse {\n    console.log(\"Geolocation is not supported by this browser.\");\n  }\n        \n    function getPosition(position) {\n    lat = position.coords.latitude;\n        lat = Math.round(lat * 100) / 100;\n    lon = position.coords.longitude;\n        lon = Math.round(lon * 100) / 100;\n        window.lat = lat;\n        window.lon = lon;\n}\n\nclass App extends React.Component {\n    state = {\n        city:undefined,\n        country:undefined,\n        temperature: undefined,\n        icon: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined        \n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n\n        const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/weather?lat=\"+window.lat+\"&lon=\"+window.lon+\"&appid=\"+API_KEY+\"&units=metric\");\n        \n        const data = await api_call.json();\n        console.log(data);\n        \n        if(lon && lat) {\n            this.setState({\n            city: data.name,\n            country: data.sys.country,\n            icon:data.weather[0].icon,\n            description: data.weather[0].description,\n            temperature:data.main.temp,\n            humidity:data.main.humidity,\n            \n        });\n        }\n        \n    }\n    \n    render() {\n        return (\n            <div className= \"contain\"> \n            <Heading />\n            <Form getWeather={this.getWeather}/>\n            <Display \n            city = {this.state.city}\n            country = {this.state.country}\n            icon = {this.state.icon}\n            description = {this.state.description}\n            temperature = {this.state.temperature}\n            humidity = {this.state.humidity}\n            />\n\n            </div>\n        );\n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}